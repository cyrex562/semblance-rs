use crate::x86_instr_arg_type::X86ArgType::{CL, IMM, IMM8, MEM, NONE, ONE, RM};
use crate::x86_instr_def::{OP_64, OP_FAR, OP_LOCK, OP_STACK, OP_STOP};
use crate::x86_instr_operand::Operand;

pub const INSTRUCTIONS_GROUP: [Operand;108] = [
    Operand::new(0x80, 0,  8, "add",        RM,     IMM,    OP_LOCK),
    Operand::new(0x80, 1,  8, "or",         RM,     IMM,    OP_LOCK),
    Operand::new(0x80, 2,  8, "adc",        RM,     IMM,    OP_LOCK),
    Operand::new(0x80, 3,  8, "sbb",        RM,     IMM,    OP_LOCK),
    Operand::new(0x80, 4,  8, "and",        RM,     IMM,    OP_LOCK),
    Operand::new(0x80, 5,  8, "sub",        RM,     IMM,    OP_LOCK),
    Operand::new(0x80, 6,  8, "xor",        RM,     IMM,    OP_LOCK),
    Operand::new(0x80, 7,  8, "cmp",        RM,     IMM, 0),
    Operand::new(0x81, 0, -1, "add",        RM,     IMM,    OP_LOCK),
    Operand::new(0x81, 1, -1, "or",         RM,     IMM,    OP_LOCK),
    Operand::new(0x81, 2, -1, "adc",        RM,     IMM,    OP_LOCK),
    Operand::new(0x81, 3, -1, "sbb",        RM,     IMM,    OP_LOCK),
    Operand::new(0x81, 4, -1, "and",        RM,     IMM,    OP_LOCK),
    Operand::new(0x81, 5, -1, "sub",        RM,     IMM,    OP_LOCK),
    Operand::new(0x81, 6, -1, "xor",        RM,     IMM,    OP_LOCK),
    Operand::new(0x81, 7, -1, "cmp",        RM,     IMM, 0),
    Operand::new(0x82, 0,  8, "add",        RM,     IMM8,   OP_LOCK), /*  aliased */
    Operand::new(0x82, 1,  8, "or",         RM,     IMM8,   OP_LOCK),
    Operand::new(0x82, 2,  8, "adc",        RM,     IMM8,   OP_LOCK),
    Operand::new(0x82, 3,  8, "sbb",        RM,     IMM8,   OP_LOCK),
    Operand::new(0x82, 4,  8, "and",        RM,     IMM8,   OP_LOCK),
    Operand::new(0x82, 5,  8, "sub",        RM,     IMM8,   OP_LOCK),
    Operand::new(0x82, 6,  8, "xor",        RM,     IMM8,   OP_LOCK),
    Operand::new(0x82, 7,  8, "cmp",        RM,     IMM8, 0),
    Operand::new(0x83, 0, -1, "add",        RM,     IMM8,   OP_LOCK),
    Operand::new(0x83, 1, -1, "or",         RM,     IMM8,   OP_LOCK),
    Operand::new(0x83, 2, -1, "adc",        RM,     IMM8,   OP_LOCK),
    Operand::new(0x83, 3, -1, "sbb",        RM,     IMM8,   OP_LOCK),
    Operand::new(0x83, 4, -1, "and",        RM,     IMM8,   OP_LOCK),
    Operand::new(0x83, 5, -1, "sub",        RM,     IMM8,   OP_LOCK),
    Operand::new(0x83, 6, -1, "xor",        RM,     IMM8,   OP_LOCK),
    Operand::new(0x83, 7, -1, "cmp",        RM,     IMM8, 0),

    Operand::new(0x8F, 0, -1, "pop",        RM,     NONE,      OP_STACK),

    Operand::new(0xC0, 0,  8, "rol",        RM,     IMM8, 0),
    Operand::new(0xC0, 1,  8, "ror",        RM,     IMM8, 0),
    Operand::new(0xC0, 2,  8, "rcl",        RM,     IMM8, 0),
    Operand::new(0xC0, 3,  8, "rcr",        RM,     IMM8, 0),
    Operand::new(0xC0, 4,  8, "shl",        RM,     IMM8, 0),
    Operand::new(0xC0, 5,  8, "shr",        RM,     IMM8, 0),
    Operand::new(0xC0, 6,  8, "sal",        RM,     IMM8, 0), /* aliased to shl */
    Operand::new(0xC0, 7,  8, "sar",        RM,     IMM8, 0),
    Operand::new(0xC1, 0, -1, "rol",        RM,     IMM8, 0),
    Operand::new(0xC1, 1, -1, "ror",        RM,     IMM8, 0),
    Operand::new(0xC1, 2, -1, "rcl",        RM,     IMM8, 0),
    Operand::new(0xC1, 3, -1, "rcr",        RM,     IMM8, 0),
    Operand::new(0xC1, 4, -1, "shl",        RM,     IMM8, 0),
    Operand::new(0xC1, 5, -1, "shr",        RM,     IMM8, 0),
    Operand::new(0xC1, 6, -1, "sal",        RM,     IMM8, 0), /* aliased to shl */
    Operand::new(0xC1, 7, -1, "sar",        RM,     IMM8, 0),

    Operand::new(0xC6, 0,  8, "mov",        RM,     IMM, 0),
    Operand::new(0xC7, 0, -1, "mov",        RM,     IMM, 0),

    Operand::new(0xD0, 0,  8, "rol",        RM,     ONE, 0),
    Operand::new(0xD0, 1,  8, "ror",        RM,     ONE, 0),
    Operand::new(0xD0, 2,  8, "rcl",        RM,     ONE, 0),
    Operand::new(0xD0, 3,  8, "rcr",        RM,     ONE, 0),
    Operand::new(0xD0, 4,  8, "shl",        RM,     ONE, 0),
    Operand::new(0xD0, 5,  8, "shr",        RM,     ONE, 0),
    Operand::new(0xD0, 6,  8, "sal",        RM,     ONE, 0), /* aliased to shl */
    Operand::new(0xD0, 7,  8, "sar",        RM,     ONE, 0),
    Operand::new(0xD1, 0, -1, "rol",        RM,     ONE, 0),
    Operand::new(0xD1, 1, -1, "ror",        RM,     ONE, 0),
    Operand::new(0xD1, 2, -1, "rcl",        RM,     ONE, 0),
    Operand::new(0xD1, 3, -1, "rcr",        RM,     ONE, 0),
    Operand::new(0xD1, 4, -1, "shl",        RM,     ONE, 0),
    Operand::new(0xD1, 5, -1, "shr",        RM,     ONE, 0),
    Operand::new(0xD1, 6, -1, "sal",        RM,     ONE, 0), /* aliased to shl */
    Operand::new(0xD1, 7, -1, "sar",        RM,     ONE, 0),
    Operand::new(0xD2, 0,  8, "rol",        RM,     CL, 0),
    Operand::new(0xD2, 1,  8, "ror",        RM,     CL, 0),
    Operand::new(0xD2, 2,  8, "rcl",        RM,     CL, 0),
    Operand::new(0xD2, 3,  8, "rcr",        RM,     CL, 0),
    Operand::new(0xD2, 4,  8, "shl",        RM,     CL, 0),
    Operand::new(0xD2, 5,  8, "shr",        RM,     CL, 0),
    Operand::new(0xD2, 6,  8, "sal",        RM,     CL, 0), /* aliased to shl */
    Operand::new(0xD2, 7,  8, "sar",        RM,     CL, 0),
    Operand::new(0xD3, 0, -1, "rol",        RM,     CL, 0),
    Operand::new(0xD3, 1, -1, "ror",        RM,     CL, 0),
    Operand::new(0xD3, 2, -1, "rcl",        RM,     CL, 0),
    Operand::new(0xD3, 3, -1, "rcr",        RM,     CL, 0),
    Operand::new(0xD3, 4, -1, "shl",        RM,     CL, 0),
    Operand::new(0xD3, 5, -1, "shr",        RM,     CL, 0),
    Operand::new(0xD3, 6, -1, "sal",        RM,     CL, 0), /* aliased to shl */
    Operand::new(0xD3, 7, -1, "sar",        RM,     CL, 0),
    Operand::new(0xF6, 0,  8, "test",       RM,     IMM, 0),
    Operand::new(0xF6, 1,  8, "test",       RM,     IMM, 0),   /* aliased to 0 */
    Operand::new(0xF6, 2,  8, "not",        RM,     NONE,      OP_LOCK),
    Operand::new(0xF6, 3,  8, "neg",        RM,     NONE,      OP_LOCK),
    Operand::new(0xF6, 4,  8, "mul",        RM, NONE, 0),
    Operand::new(0xF6, 5,  8, "imul",       RM, NONE, 0),
    Operand::new(0xF6, 6,  8, "div",        RM, NONE, 0),
    Operand::new(0xF6, 7,  8, "idiv",       RM, NONE, 0),
    Operand::new(0xF7, 0, -1, "test",       RM,     IMM, 0),
    Operand::new(0xF7, 1, -1, "test",       RM,     IMM, 0),   /* aliased to 0 */
    Operand::new(0xF7, 2, -1, "not",        RM,     NONE,      OP_LOCK),
    Operand::new(0xF7, 3, -1, "neg",        RM,     NONE,      OP_LOCK),
    Operand::new(0xF7, 4, -1, "mul",        RM, NONE, 0),
    Operand::new(0xF7, 5, -1, "imul",       RM, NONE, 0),
    Operand::new(0xF7, 6, -1, "div",        RM, NONE, 0),
    Operand::new(0xF7, 7, -1, "idiv",       RM, NONE, 0),
    Operand::new(0xFE, 0,  8, "inc",        RM,     NONE,      OP_LOCK),
    Operand::new(0xFE, 1,  8, "dec",        RM,     NONE,      OP_LOCK),
    Operand::new(0xFF, 0, -1, "inc",        RM,     NONE,      OP_LOCK),
    Operand::new(0xFF, 1, -1, "dec",        RM,     NONE,      OP_LOCK),
    Operand::new(0xFF, 2, -1, "call",       RM,     NONE,      OP_64),
    Operand::new(0xFF, 3, -1, "call",       MEM,    NONE,      OP_64|OP_FAR),          /* a change in bitness should only happen across segment boundaries */
    Operand::new(0xFF, 4, -1, "jmp",        RM,     NONE,      OP_64|OP_STOP),
    Operand::new(0xFF, 5, -1, "jmp",        MEM,    NONE,      OP_64|OP_STOP|OP_FAR),  /* a change in bitness should only happen across segment boundaries */
    Operand::new(0xFF, 6, -1, "push",       RM,     NONE,      OP_STACK),
];
