use crate::x86_instr_arg_type::X86ArgType::{
    AX, BP, BX, CR32, CX, DI, DR32, DX, FS, GS, IMM8, MEM, NONE, REG, REG32, REL, RM, SI, SP, TR32,
};
use crate::x86_instr_def::{
    OP_ARG2_CL, OP_ARG2_IMM8, OP_BRANCH, OP_LOCK, OP_OP32_REGONLY, OP_STACK,
};
use crate::x86_instr_operand::Operand;

pub const INSTRUCTIONS_0F: [Operand; 133] = [
    Operand::new(0x00, 0, -1, "sldt", RM, NONE, OP_OP32_REGONLY), /* todo: implement this flag */
    Operand::new(0x00, 1, -1, "str", RM, NONE, OP_OP32_REGONLY),
    Operand::new(0x00, 2, 16, "lldt", RM, NONE, 0),
    Operand::new(0x00, 3, 16, "ltr", RM, NONE, 0),
    Operand::new(0x00, 4, 16, "verr", RM, NONE, 0),
    Operand::new(0x00, 5, 16, "verw", RM, NONE, 0),
    /* 00/6 unused */
    /* 00/7 unused */
    Operand::new(0x01, 0, 0, "sgdt", MEM, NONE, 0),
    Operand::new(0x01, 1, 0, "sidt", MEM, NONE, 0),
    Operand::new(0x01, 2, 0, "lgdt", MEM, NONE, 0),
    Operand::new(0x01, 3, 0, "lidt", MEM, NONE, 0),
    Operand::new(0x01, 4, -1, "smsw", RM, NONE, OP_OP32_REGONLY),
    /* 01/5 unused */
    Operand::new(0x01, 6, 16, "lmsw", RM, NONE, 0),
    Operand::new(0x01, 7, 0, "invlpg", MEM, NONE, 0),
    Operand::new(0x02, 8, -1, "lar", REG, RM, OP_OP32_REGONLY), /* fixme: should be RM16 */
    Operand::new(0x03, 8, -1, "lsl", REG, RM, OP_OP32_REGONLY), /* fixme: should be RM16 */
    /* 04 unused */
    Operand::new(0x05, 8, 0, "syscall", NONE, NONE, 0),
    Operand::new(0x06, 8, 0, "clts", NONE, NONE, 0),
    Operand::new(0x07, 8, 0, "sysret", NONE, NONE, 0),
    Operand::new(0x08, 8, 0, "invd", NONE, NONE, 0),
    Operand::new(0x09, 8, 0, "wbinvd", NONE, NONE, 0),
    Operand::new(0x0d, 8, -1, "prefetch", RM, NONE, 0), /* Intel has NOP here; we're just following GCC */
    Operand::new(0x18, 0, 8, "prefetchnta", MEM, NONE, 0),
    Operand::new(0x18, 1, 8, "prefetcht0", MEM, NONE, 0),
    Operand::new(0x18, 2, 8, "prefetcht1", MEM, NONE, 0),
    Operand::new(0x18, 3, 8, "prefetcht2", MEM, NONE, 0),
    Operand::new(0x1f, 8, -1, "nop", RM, NONE, 0),
    Operand::new(0x20, 8, -1, "mov", REG32, CR32, 0), /* here mod is simply ignored */
    Operand::new(0x21, 8, -1, "mov", REG32, DR32, 0),
    Operand::new(0x22, 8, -1, "mov", CR32, REG32, 0),
    Operand::new(0x23, 8, -1, "mov", DR32, REG32, 0),
    Operand::new(0x24, 8, -1, "mov", REG32, TR32, 0),
    /* 25 unused */
    Operand::new(0x26, 8, -1, "mov", TR32, REG32, 0),
    Operand::new(0x30, 8, -1, "wrmsr", NONE, NONE, 0),
    Operand::new(0x31, 8, -1, "rdtsc", NONE, NONE, 0),
    Operand::new(0x32, 8, -1, "rdmsr", NONE, NONE, 0),
    Operand::new(0x33, 8, -1, "rdpmc", NONE, NONE, 0),
    Operand::new(0x34, 8, -1, "sysenter", NONE, NONE, 0),
    Operand::new(0x35, 8, -1, "sysexit", NONE, NONE, 0),
    Operand::new(0x40, 8, -1, "cmovo", REG, RM, 0),
    Operand::new(0x41, 8, -1, "cmovno", REG, RM, 0),
    Operand::new(0x42, 8, -1, "cmovb", REG, RM, 0),
    Operand::new(0x43, 8, -1, "cmovae", REG, RM, 0),
    Operand::new(0x44, 8, -1, "cmovz", REG, RM, 0),
    Operand::new(0x45, 8, -1, "cmovnz", REG, RM, 0),
    Operand::new(0x46, 8, -1, "cmovbe", REG, RM, 0),
    Operand::new(0x47, 8, -1, "cmova", REG, RM, 0),
    Operand::new(0x48, 8, -1, "cmovs", REG, RM, 0),
    Operand::new(0x49, 8, -1, "cmovns", REG, RM, 0),
    Operand::new(0x4A, 8, -1, "cmovp", REG, RM, 0),
    Operand::new(0x4B, 8, -1, "cmovnp", REG, RM, 0),
    Operand::new(0x4C, 8, -1, "cmovl", REG, RM, 0),
    Operand::new(0x4D, 8, -1, "cmovge", REG, RM, 0),
    Operand::new(0x4E, 8, -1, "cmovle", REG, RM, 0),
    Operand::new(0x4F, 8, -1, "cmovg", REG, RM, 0),
    Operand::new(0x80, 8, -1, "jo", REL, NONE, OP_BRANCH),
    Operand::new(0x81, 8, -1, "jno", REL, NONE, OP_BRANCH),
    Operand::new(0x82, 8, -1, "jb", REL, NONE, OP_BRANCH),
    Operand::new(0x83, 8, -1, "jae", REL, NONE, OP_BRANCH),
    Operand::new(0x84, 8, -1, "jz", REL, NONE, OP_BRANCH),
    Operand::new(0x85, 8, -1, "jnz", REL, NONE, OP_BRANCH),
    Operand::new(0x86, 8, -1, "jbe", REL, NONE, OP_BRANCH),
    Operand::new(0x87, 8, -1, "ja", REL, NONE, OP_BRANCH),
    Operand::new(0x88, 8, -1, "js", REL, NONE, OP_BRANCH),
    Operand::new(0x89, 8, -1, "jns", REL, NONE, OP_BRANCH),
    Operand::new(0x8A, 8, -1, "jp", REL, NONE, OP_BRANCH),
    Operand::new(0x8B, 8, -1, "jnp", REL, NONE, OP_BRANCH),
    Operand::new(0x8C, 8, -1, "jl", REL, NONE, OP_BRANCH),
    Operand::new(0x8D, 8, -1, "jge", REL, NONE, OP_BRANCH),
    Operand::new(0x8E, 8, -1, "jle", REL, NONE, OP_BRANCH),
    Operand::new(0x8F, 8, -1, "jg", REL, NONE, OP_BRANCH),
    Operand::new(0x90, 0, 8, "seto", RM, NONE, 0),
    Operand::new(0x91, 0, 8, "setno", RM, NONE, 0),
    Operand::new(0x92, 0, 8, "setb", RM, NONE, 0),
    Operand::new(0x93, 0, 8, "setae", RM, NONE, 0),
    Operand::new(0x94, 0, 8, "setz", RM, NONE, 0),
    Operand::new(0x95, 0, 8, "setnz", RM, NONE, 0),
    Operand::new(0x96, 0, 8, "setbe", RM, NONE, 0),
    Operand::new(0x97, 0, 8, "seta", RM, NONE, 0),
    Operand::new(0x98, 0, 8, "sets", RM, NONE, 0),
    Operand::new(0x99, 0, 8, "setns", RM, NONE, 0),
    Operand::new(0x9A, 0, 8, "setp", RM, NONE, 0),
    Operand::new(0x9B, 0, 8, "setnp", RM, NONE, 0),
    Operand::new(0x9C, 0, 8, "setl", RM, NONE, 0),
    Operand::new(0x9D, 0, 8, "setge", RM, NONE, 0),
    Operand::new(0x9E, 0, 8, "setle", RM, NONE, 0),
    Operand::new(0x9F, 0, 8, "setg", RM, NONE, 0),
    Operand::new(0xA0, 8, -1, "push", FS, NONE, OP_STACK),
    Operand::new(0xA1, 8, -1, "pop", FS, NONE, OP_STACK),
    Operand::new(0xA2, 8, 0, "cpuid", NONE, NONE, 0),
    Operand::new(0xA3, 8, -1, "bt", RM, REG, 0),
    Operand::new(0xA4, 8, -1, "shld", RM, REG, OP_ARG2_IMM8),
    Operand::new(0xA5, 8, -1, "shld", RM, REG, OP_ARG2_CL),
    /* A6,7 unused */
    Operand::new(0xA8, 8, -1, "push", GS, NONE, OP_STACK),
    Operand::new(0xA9, 8, -1, "pop", GS, NONE, OP_STACK),
    /* AA - rsm? */
    Operand::new(0xAB, 8, -1, "bts", RM, REG, OP_LOCK),
    Operand::new(0xAC, 8, -1, "shrd", RM, REG, OP_ARG2_IMM8),
    Operand::new(0xAD, 8, -1, "shrd", RM, REG, OP_ARG2_CL),
    Operand::new(0xAE, 0, 0, "fxsave", MEM, NONE, 0),
    Operand::new(0xAE, 1, 0, "fxrstor", MEM, NONE, 0),
    Operand::new(0xAE, 2, 0, "ldmxcsr", MEM, NONE, 0),
    Operand::new(0xAE, 3, 0, "stmxcsr", MEM, NONE, 0),
    Operand::new(0xAE, 4, 0, "xsave", MEM, NONE, 0),
    Operand::new(0xAE, 5, 0, "xrstor", MEM, NONE, 0),
    Operand::new(0xAE, 7, 0, "clflush", MEM, NONE, 0),
    Operand::new(0xAF, 8, -1, "imul", REG, RM, 0),
    Operand::new(0xB0, 8, 8, "cmpxchg", RM, REG, OP_LOCK),
    Operand::new(0xB1, 8, -1, "cmpxchg", RM, REG, OP_LOCK),
    Operand::new(0xB2, 8, -1, "lss", REG, MEM, 0),
    Operand::new(0xB3, 8, -1, "btr", RM, REG, OP_LOCK),
    Operand::new(0xB4, 8, -1, "lfs", REG, MEM, 0),
    Operand::new(0xB5, 8, -1, "lgs", REG, MEM, 0),
    Operand::new(0xB6, 8, -1, "movzx", REG, RM, 0),
    Operand::new(0xB7, 8, -1, "movzx", REG, RM, 0),
    /* B8, 9, A.0-3 unused */
    Operand::new(0xBA, 4, -1, "bt", RM, IMM8, 0),
    Operand::new(0xBA, 5, -1, "bts", RM, IMM8, OP_LOCK),
    Operand::new(0xBA, 6, -1, "btr", RM, IMM8, OP_LOCK),
    Operand::new(0xBA, 7, -1, "btc", RM, IMM8, OP_LOCK),
    Operand::new(0xBB, 8, -1, "btc", RM, REG, OP_LOCK),
    Operand::new(0xBC, 8, -1, "bsf", REG, RM, 0),
    Operand::new(0xBD, 8, -1, "bsr", REG, RM, 0),
    Operand::new(0xBE, 8, -1, "movsx", REG, RM, 0),
    Operand::new(0xBF, 8, -1, "movsx", REG, RM, 0),
    Operand::new(0xC0, 8, 8, "xadd", RM, REG, OP_LOCK),
    Operand::new(0xC1, 8, -1, "xadd", RM, REG, OP_LOCK),
    Operand::new(0xC7, 1, 0, "cmpxchg8b", MEM, NONE, OP_LOCK),
    Operand::new(0xC8, 8, -1, "bswap", AX, NONE, 0),
    Operand::new(0xC9, 8, -1, "bswap", CX, NONE, 0),
    Operand::new(0xCA, 8, -1, "bswap", DX, NONE, 0),
    Operand::new(0xCB, 8, -1, "bswap", BX, NONE, 0),
    Operand::new(0xCC, 8, -1, "bswap", SP, NONE, 0),
    Operand::new(0xCD, 8, -1, "bswap", BP, NONE, 0),
    Operand::new(0xCE, 8, -1, "bswap", SI, NONE, 0),
    Operand::new(0xCF, 8, -1, "bswap", DI, NONE, 0),
];
